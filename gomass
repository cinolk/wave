pipeline {
    agent any
    stages 
    {
        stage('Start') {
            steps {
            script{
                def fileList = ${WORKSPACE}
                def list = readFile("SonarQube.Analysis.xml").readLines()
                for (item in list){
                	print item
                    def(jobToDeploy,version) = item.split(':')[0,1]
                    println(jobToDeploy)
                    println(version)
                    build job: jobToDeploy, parameters: [string(name: 'version', value: version)]
                    println("-----------JOB COMPLETED SUCUSSFUL---------")
                    }
                }
            }
        }          
        stage('End') {
            steps {
                sh 'ls'
            }
        }
    }
}


// the second file is as below where the data is fetched





@Library('ibbclibrary') _

pipeline {
    agent {
        node {
            label 'master'
            customWorkspace "/work/spacee/${env.JOB_NAME}/Build"
        }
    }
    options {
        skipDefaultCheckout true
    }
    parameters {
        choice(name: 'IDHUB_ENV', choices: "VM01\nVM02\nVM04\nVM05", description: 'The environment for of IDHub for this run.')
        choice(name: 'STOP_OR_START', choices: "Stop\nStart\nRestart", description: 'Do you want to stop, start or restart all of the services?')
    }
    environment {
        BITBUCKET_CREDENTIALS_ID = "c"
        DEV_CREDENTIALS_ID = "dev_root"
        CHEF_BRANCH = "master"
        CHEF_REPO = "abct"
        CHEF_WS = "/work/jenkins/workspace/${env.JOB_NAME}/Chef"
        CHEF_USER = "user"
        CHEF_PEM_HOST = "hsot"
        CHEF_DEV_ORG = "devorg"
        SCP_USER = "bbc"
        PEM_PATH = "/pems/"
    }
    stages {
        stage('Checkout Chef') {
            steps {
                script {
                   if (env.IDHUB_ENV == 'VM04'){
                        WEB_CHEF_NODE = 'DEV-IDH-WEB04'
                        ONL_CHEF_NODE = 'DEV-IDH-ONL04'
                        BAT_CHEF_NODE = 'DEV-IDH-BAT04'
                    } else if (env.IDHUB_ENV == 'VM05') { 
                        WEB_CHEF_NODE = 'DA-DEV-AGWEB05'
                        ONL_CHEF_NODE = 'DA-DEV-AGONL05'
                        BAT_CHEF_NODE = 'DA-DEV-AGBAT05'
                    } else if (env.IDHUB_ENV == 'VM02') { 
                        WEB_CHEF_NODE = 'DA-DEV-AGWEB02'
                        ONL_CHEF_NODE = 'DA-DEV-AGONL02'
                        BAT_CHEF_NODE = 'DA-DEV-AGBAT02'
                    } else if (env.IDHUB_ENV == 'VM01') { 
                        WEB_CHEF_NODE = 'DA-DEV-AGWEB01'
                        ONL_CHEF_NODE = 'DA-DEV-AGONL01'
                        BAT_CHEF_NODE = 'DA-DEV-AGBAT01'
                    }

                    desc = ["Environment": "${env.IDHUB_ENV}", "Action": "${env.STOP_OR_START}"]
                    desc.each { header, value ->
                        setBuildDescription(header,value)
                    }

                    env.stop_cmd1 = "knife ssh name:${WEB_CHEF_NODE} 'chef-client -o recipe[idhub-web-master::stop_services]'"
                    env.stop_cmd2 = "knife ssh name:${ONL_CHEF_NODE} 'chef-client -o recipe[idhub-online-master::stop_services]'"
                    env.stop_cmd3 = "knife ssh name:${BAT_CHEF_NODE} 'chef-client -o role[batch_hornetq],recipe[idhub-batch-master::stop_services]'"
                    env.start_cmd1 = "knife ssh name:${BAT_CHEF_NODE} 'chef-client -o role[batch_hornetq],recipe[idhub-batch-master::start_services]'"
                    env.start_cmd2 = "knife ssh name:${ONL_CHEF_NODE} 'chef-client -o recipe[idhub-online-master::start_services]'"
                    env.start_cmd3 = "knife ssh name:${WEB_CHEF_NODE} 'chef-client -o recipe[idhub-web-master::start_services]'"
                    
                    //checkout chef
                    ws(env.CHEF_WS) {
                        checkoutHTTPRepository(env.CHEF_REPO, env.CHEF_BRANCH, env.BITBUCKET_CREDENTIALS_ID)

                       sh "echo node_name: '${env.CHEF_USER}' > .chef/dev/config.yml"
                       sh "echo server: '${env.CHEF_DEV_ORG}' >> .chef/dev/config.yml"
                       
                       sh "curl --output .chef/shabc.pem"
 
                    }
               }
           }
        }

        stage('BAT,ONL,WEB SERVICES') {
            steps {
                script {
                    ws(env.CHEF_WS) {
                        lock('Knife') {
                            sh "export CHEF_ENV=dev"
                            withCredentials([usernamePassword(credentialsId: "${DEV_CREDENTIALS_ID}", passwordVariable: 'password', usernameVariable: 'username')]) 
                            {   
                                if (env.STOP_OR_START == 'Stop') { 
                                    sh "${env.stop_cmd1} -x '$username' -P '$password'"
                                    sh "${env.stop_cmd2} -x '$username' -P '$password'"
                                    sh "${env.stop_cmd3} -x '$username' -P '$password'"
                                } else if (env.STOP_OR_START == 'Start') {
                                    sh "${env.start_cmd1} -x '$username' -P '$password'"
                                    sh "${env.start_cmd2} -x '$username' -P '$password'"
                                    sh "${env.start_cmd3} -x '$username' -P '$password'"   
                                } else {
                                    sh "${env.stop_cmd1} -x '$username' -P '$password'"
                                    sh "${env.stop_cmd2} -x '$username' -P '$password'"
                                    sh "${env.stop_cmd3} -x '$username' -P '$password'"
                                    sh "${env.start_cmd1} -x '$username' -P '$password'"
                                    sh "${env.start_cmd2} -x '$username' -P '$password'"
                                    sh "${env.start_cmd3} -x '$username' -P '$password'"  
                                }
                            }
                        }
                    }
                }
            }
        }    

    }
}
// test1_deploy:2.3
//test2_deploy:12.4
